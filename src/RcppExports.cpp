// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ConvexNMF_ADMM
List ConvexNMF_ADMM(arma::mat& V, int k, arma::uvec cluster, bool verbose, int maxiter, int fixediter, double rho, double tol);
RcppExport SEXP _nmfADMM_ConvexNMF_ADMM(SEXP VSEXP, SEXP kSEXP, SEXP clusterSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP fixediterSEXP, SEXP rhoSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type fixediter(fixediterSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ConvexNMF_ADMM(V, k, cluster, verbose, maxiter, fixediter, rho, tol));
    return rcpp_result_gen;
END_RCPP
}
// SymNMFs_ADMM
List SymNMFs_ADMM(arma::mat& Vp, arma::mat& Vm, int k, arma::uvec cluster, std::string dist, bool verbose, int maxiter, int fixediter, double rho, double tol);
RcppExport SEXP _nmfADMM_SymNMFs_ADMM(SEXP VpSEXP, SEXP VmSEXP, SEXP kSEXP, SEXP clusterSEXP, SEXP distSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP fixediterSEXP, SEXP rhoSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Vp(VpSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Vm(VmSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type fixediter(fixediterSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SymNMFs_ADMM(Vp, Vm, k, cluster, dist, verbose, maxiter, fixediter, rho, tol));
    return rcpp_result_gen;
END_RCPP
}
// SymNMF_ADMM
List SymNMF_ADMM(arma::mat& V, int k, arma::uvec cluster, std::string dist, bool verbose, int maxiter, int fixediter, double rho, double tol);
RcppExport SEXP _nmfADMM_SymNMF_ADMM(SEXP VSEXP, SEXP kSEXP, SEXP clusterSEXP, SEXP distSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP fixediterSEXP, SEXP rhoSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type fixediter(fixediterSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SymNMF_ADMM(V, k, cluster, dist, verbose, maxiter, fixediter, rho, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nmfADMM_ConvexNMF_ADMM", (DL_FUNC) &_nmfADMM_ConvexNMF_ADMM, 8},
    {"_nmfADMM_SymNMFs_ADMM", (DL_FUNC) &_nmfADMM_SymNMFs_ADMM, 10},
    {"_nmfADMM_SymNMF_ADMM", (DL_FUNC) &_nmfADMM_SymNMF_ADMM, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_nmfADMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
